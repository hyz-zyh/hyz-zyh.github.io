/* http://github.com/mindmup/bootstrap-wysiwyg */
/*!function (a) {
    "use strict";
    var b = function (b) {
        var c = a.Deferred(), d = new FileReader;
        return d.onload = function (a) {
            c.resolve(a.target.result)
        }, d.onerror = c.reject, d.onprogress = c.notify, d.readAsDataURL(b), c.promise()
    };
    a.fn.cleanHtml = function () {
        var b = a(this).html();
        return b && b.replace(/(<br>|\s|<div><br><\/div>|&nbsp;)*$/, "")
    }, a.fn.wysiwyg = function (c) {
        var d, e, f, g = this, h = function () {
            e.activeToolbarClass && a(e.toolbarSelector).find(f).each(function () {
                try {
                    var b = a(this).data(e.commandRole);
                    document.queryCommandState(b) ? a(this).addClass(e.activeToolbarClass) : a(this).removeClass(e.activeToolbarClass)
                } catch (c) {
                }
            })
        }, i = function (a, b) {
            var c = a.split(" "), d = c.shift(), e = c.join(" ") + (b || "");
            document.execCommand(d, 0, e), h()
        }, j = function (b) {
            a.each(b, function (a, b) {
                g.keydown(a, function (a) {
                    g.attr("contenteditable") && g.is(":visible") && (a.preventDefault(), a.stopPropagation(), i(b))
                }).keyup(a, function (a) {
                    g.attr("contenteditable") && g.is(":visible") && (a.preventDefault(), a.stopPropagation())
                })
            })
        }, k = function () {
            try {
                var a = window.getSelection();
                if (a.getRangeAt && a.rangeCount)return a.getRangeAt(0)
            } catch (b) {
            }
        }, l = function () {
            d = k()
        }, m = function () {
            try {
                var a = window.getSelection();
                if (d) {
                    try {
                        a.removeAllRanges()
                    } catch (b) {
                        document.body.createTextRange().select(), document.selection.empty()
                    }
                    a.addRange(d)
                }
            } catch (c) {
            }
        }, n = function (c) {
            g.focus(), a.each(c, function (c, d) {
                /^image\//.test(d.type) ? a.when(b(d)).done(function (a) {
                    i("insertimage", a)
                }).fail(function (a) {
                    e.fileUploadError("file-reader", a)
                }) : e.fileUploadError("unsupported-file-type", d.type)
            })
        }, o = function (a, b) {
            m(), document.queryCommandSupported("hiliteColor") && document.execCommand("hiliteColor", 0, b || "transparent"), l(), a.data(e.selectionMarker, b)
        }, p = function (b, c) {
            b.find(f).click(function () {
                m(), g.focus(), i(a(this).data(c.commandRole)), l()
            }), b.find("[data-toggle=dropdown]").click(m);
            var d = !!window.navigator.msPointerEnabled || !!document.all && !!document.addEventListener;
            b.find("input[type=text][data-" + c.commandRole + "]").on("webkitspeechchange change", function () {
                var b = this.value;
                this.value = "", m(), b && (g.focus(), i(a(this).data(c.commandRole), b)), l()
            }).on("focus", function () {
                if (!d) {
                    var b = a(this);
                    b.data(c.selectionMarker) || (o(b, c.selectionColor), b.focus())
                }
            }).on("blur", function () {
                if (!d) {
                    var b = a(this);
                    b.data(c.selectionMarker) && o(b, !1)
                }
            }), b.find("input[type=file][data-" + c.commandRole + "]").change(function () {
                m(), "file" === this.type && this.files && this.files.length > 0 && n(this.files), l(), this.value = ""
            })
        }, q = function () {
            g.on("dragenter dragover", !1).on("drop", function (a) {
                var b = a.originalEvent.dataTransfer;
                a.stopPropagation(), a.preventDefault(), b && b.files && b.files.length > 0 && n(b.files)
            })
        };
        return e = a.extend({}, a.fn.wysiwyg.defaults, c), f = "a[data-" + e.commandRole + "],button[data-" + e.commandRole + "],input[type=button][data-" + e.commandRole + "]", j(e.hotKeys), e.dragAndDropImages && q(), p(a(e.toolbarSelector), e), g.attr("contenteditable", !0).on("mouseup keyup mouseout", function () {
            l(), h()
        }), a(window).bind("touchend", function (a) {
            var b = g.is(a.target) || g.has(a.target).length > 0, c = k(), d = c && c.startContainer === c.endContainer && c.startOffset === c.endOffset;
            d && !b || (l(), h())
        }), this
    }, a.fn.wysiwyg.defaults = {
        hotKeys: {
            "ctrl+b meta+b": "bold",
            "ctrl+i meta+i": "italic",
            "ctrl+u meta+u": "underline",
            "ctrl+z meta+z": "undo",
            "ctrl+y meta+y meta+shift+z": "redo",
            "ctrl+l meta+l": "justifyleft",
            "ctrl+r meta+r": "justifyright",
            "ctrl+e meta+e": "justifycenter",
            "ctrl+j meta+j": "justifyfull",
            "shift+tab": "outdent",
            tab: "indent"
        },
        toolbarSelector: "[data-role=editor-toolbar]",
        commandRole: "edit",
        activeToolbarClass: "btn-info",
        selectionMarker: "edit-focus-marker",
        selectionColor: "darkgrey",
        dragAndDropImages: !0,
        fileUploadError: function (a, b) {
            console.log("File upload error", a, b)
        }
    }
}(window.jQuery);*/
jQuery(function ($) {
    'use strict';
    var readFileIntoDataUrl = function (fileInfo) {
        var loader = $.Deferred(),
            fReader = new FileReader();
        fReader.onload = function (e) {
            loader.resolve(e.target.result);
        };
        fReader.onerror = loader.reject;
        fReader.onprogress = loader.notify;
        fReader.readAsDataURL(fileInfo);
        return loader.promise();
    };
    $.fn.cleanHtml = function () {
        var html = $(this).html();
        return html && html.replace(/(<br>|\s|<div><br><\/div>|&nbsp;)*$/, '');
    };
    $.fn.wysiwyg = function (userOptions) {
        var editor = this,
            selectedRange,
            options,
            updateToolbar = function () {
                if (options.activeToolbarClass) {
                    $(options.toolbarSelector).find('.btn[data-' + options.commandRole + ']').each(function () {
                        var command = $(this).data(options.commandRole);
                        if (document.queryCommandState(command)) {
                            $(this).addClass(options.activeToolbarClass);
                        } else {
                            $(this).removeClass(options.activeToolbarClass);
                        }
                    });
                }
            },
            execCommand = function (commandWithArgs, valueArg) {
                var commandArr = commandWithArgs.split(' '),
                    command = commandArr.shift(),
                    args = commandArr.join(' ') + (valueArg || '');
                document.execCommand(command, 0, args);
                updateToolbar();
            },
            bindHotkeys = function (hotKeys) {
                $.each(hotKeys, function (hotkey, command) {
                    editor.keydown(hotkey, function (e) {
                        if (editor.attr('contenteditable') && editor.is(':visible')) {
                            e.preventDefault();
                            e.stopPropagation();
                            execCommand(command);
                        }
                    }).keyup(hotkey, function (e) {
                        if (editor.attr('contenteditable') && editor.is(':visible')) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                });
            },
            getCurrentRange = function () {
                var sel = window.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    return sel.getRangeAt(0);
                }
            },
            saveSelection = function () {
                selectedRange = getCurrentRange();
            },
            restoreSelection = function () {
                var selection = window.getSelection();
                if (selectedRange) {
                    try {
                        selection.removeAllRanges();
                    } catch (ex) {
                        var textRange = document.body.createTextRange();
                        textRange.select();
                        document.selection.empty();
                    }

                    selection.addRange(selectedRange);
                }
            },

            insertFiles = function (files) {
                //原文件（maybe）
                /*editor.focus();
                $.each(files, function (idx, fileInfo) {
                    if (/^image\//.test(fileInfo.type)) {
                        $.when(readFileIntoDataUrl(fileInfo)).done(function (dataUrl) {
                            execCommand('insertimage', dataUrl);
                        });
                    }

                });*/
                var currentFile = files;
                console.log(files);
                getImgUrl(currentFile,function(imgUrl){
                    editor.focus();
                    execCommand('insertimage',imgUrl);
                    $.each(currentFile, function (idx, fileInfo) {
                        if (/^image\//.test(fileInfo.type)) {
                            $.when(readFileIntoDataUrl(fileInfo)).done(function (dataUrl) {
                                execCommand('insertimage', dataUrl);
                            });
                        }
                    });
                });
                /*editor.focus();
                $.each(files, function (idx, fileInfo) {
                    if (/^image\//.test(fileInfo.type)) {
                        $.when(readFileIntoDataUrl(fileInfo)).done(function (dataUrl) {
                            //execCommand('insertimage', dataUrl);
                            execCommand('insertimage',imgUrl);
                        });
                    }
                });*/
            },
            markSelection = function (input, color) {
                restoreSelection();
                document.execCommand('hiliteColor', 0, color || 'transparent');
                saveSelection();
                input.data(options.selectionMarker, color);
            },
            bindToolbar = function (toolbar, options) {
                toolbar.find('a[data-' + options.commandRole + ']').click(function () {
                    restoreSelection();
                    editor.focus();
                    execCommand($(this).data(options.commandRole));
                    saveSelection();
                });
                toolbar.find('[data-toggle=dropdown]').click(restoreSelection);

                toolbar.find('input[type=text][data-' + options.commandRole + ']').on('webkitspeechchange change', function () {
                    var newValue = this.value; /* ugly but prevents fake double-calls due to selection restoration */
                    this.value = '';
                    restoreSelection();
                    if (newValue) {
                        editor.focus();
                        execCommand($(this).data(options.commandRole), newValue);
                    }
                    saveSelection();
                }).on('focus', function () {
                    var input = $(this);
                    if (!input.data(options.selectionMarker)) {
                        markSelection(input, options.selectionColor);
                        input.focus();
                    }
                }).on('blur', function () {
                    var input = $(this);
                    if (input.data(options.selectionMarker)) {
                        markSelection(input, false);
                    }
                });
                toolbar.find('input[type=file][data-' + options.commandRole + ']').change(function () {
                    restoreSelection();
                    if (this.type === 'file' && this.files && this.files.length > 0) {
                        insertFiles(this.files);
                    }
                    saveSelection();
                    this.value = '';
                });
            },
            initFileDrops = function () {
                editor.on('dragenter dragover', false)
                    .on('drop', function (e) {
                        var dataTransfer = e.originalEvent.dataTransfer;
                        e.stopPropagation();
                        e.preventDefault();
                        if (dataTransfer && dataTransfer.files && dataTransfer.files.length > 0) {
                            insertFiles(dataTransfer.files);
                        }
                    });
            };
        options = $.extend({}, $.fn.wysiwyg.defaults, userOptions);
        bindHotkeys(options.hotKeys);
        initFileDrops();
        bindToolbar($(options.toolbarSelector), options);
        editor.attr('contenteditable', true)
            .on('mouseup keyup mouseout', function () {
                saveSelection();
                updateToolbar();
            });
        $(window).bind('touchend', function (e) {
            var isInside = (editor.is(e.target) || editor.has(e.target).length > 0),
                currentRange = getCurrentRange(),
                clear = currentRange && (currentRange.startContainer === currentRange.endContainer && currentRange.startOffset === currentRange.endOffset);
            if (!clear || isInside) {
                saveSelection();
                updateToolbar();
            }
        });
        return this;
    };
    $.fn.wysiwyg.defaults = {
        hotKeys: {
            'ctrl+b meta+b': 'bold',
            'ctrl+i meta+i': 'italic',
            'ctrl+u meta+u': 'underline',
            'ctrl+z meta+z': 'undo',
            'ctrl+y meta+y meta+shift+z': 'redo',
            'ctrl+l meta+l': 'justifyleft',
            'ctrl+r meta+r': 'justifyright',
            'ctrl+e meta+e': 'justifycenter',
            'ctrl+j meta+j': 'justifyfull',
            'shift+tab': 'outdent',
            'tab': 'indent'
        },
        toolbarSelector: '[data-role=editor-toolbar]',
        commandRole: 'edit',
        activeToolbarClass: 'btn-info',
        selectionMarker: 'edit-focus-marker',
        selectionColor: 'darkgrey'
    };
});
